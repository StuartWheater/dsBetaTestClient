% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ds.glm.o.R
\name{ds.glm.o}
\alias{ds.glm.o}
\title{ds.glm calling glmDS1, glmDS2}
\usage{
ds.glm.o(formula = NULL, data = NULL, family = NULL, offset = NULL,
  weights = NULL, checks = FALSE, maxit = 15, CI = 0.95,
  viewIter = FALSE, viewVarCov = FALSE, viewCor = FALSE,
  datasources = NULL)
}
\arguments{
\item{formula}{Denotes an object of class formula which is a character string which describes
the model to be fitted. Most shortcut notation allowed by R's standard glm() function is
also allowed by ds.glm. Many glms can be fitted very simply using a formula like:
"y~a+b+c+d" which simply means fit a glm with y as the outcome variable with a, b, c and d as
covariates. By default all such models also include an intercept (regression constant) term.
If all you need to fit are straightforward models such as these, you do not need to read the
remainder of this information about "formula". But if you need to fit a more complex model in a
customised way, the next paragraph gives a few additional pointers.

As an example, the formula: "EVENT~1+TID+SEXF*AGE.60" denotes fit a glm with the
variable "EVENT" as its
outcome with covariates TID (in this case a 6 level factor [categorical] variable denoting
"time period" with values between 1 and 6), SEXF (also a factor variable denoting sex
and AGE.60 (a quantitative variable representing age-60 in years). The term "1" forces
the model to include an intercept term which it would also have done by default (see above)
but using "1" may usefully be contrasted with using "0" (as explained below).
The "*" between SEXF and AGE.60
means fit all possible main effects and interactions for and between those two covariates.
As SEXF is a factor this is equivalent to writing SEXF+AGE.60+SEXF1:AGE.60 (the
last element being)
the interaction term representing the product of SEXF level 1 (in this case female)
and AGE.60.
If the formula had instead been written as :
"EVENT~0+TID+SEXF*AGE.60" the 0 would mean do NOT fit
an intercept term and, because TID happens to be a six level factor this would mean
that the first six model parameters which were originally intercept+TID2+TID3+TID4+TID5+TID6
using the first formula will now become TID1+TID2+TID3+TID4+TID5+TID6.
Conveniently, this means
that the effect of each
time period may now be estimated directly. For example, the effect of time
period 3 is now obtained
directly as TID3 rather than intercept+TID3 as was the case using the original formula.}

\item{data}{A character string specifying the name of an (optional) dataframe that contains
all of the variables in the glm formula. This avoids you having to specify the name of the
dataframe in front of each covariate in the formula e.g. if the dataframe is
called 'DataFrame' you 
avoid having to write: "DataFrame$y~DataFrame$a+DataFrame$b+DataFrame$c+DataFrame$d"
Processing stops if a non existing data frame is indicated.}

\item{family}{This argument identifies the error distribution function to use in
the model. At present
ds.glm has been written to fit family="gaussian" (i.e. a
conventional linear model, family="binomial"
(i.e. a conventional
[unconditional] logistic regression model), and family = "poisson" (i.e. a
Poisson regression model - of which perhaps the most commonly used application
is for survival analysis
using Piecewise Exponential Regression (PER) which
typically closely approximates Cox regression in its
main estimates and standard
errors. More information about PER can be found in the help folder for
the ds.lexis function which sets up the data structure for a PER. At present the
gaussian family is
automatically coupled with an 'identity' link function, the binomial family with a
'logistic' link
function and the poisson family with a 'log' link function. For the majority of
applications typically
encountered in epidemiology and medical statistics, one  these three classes of
models will
generally be what you need. However, if a particular user wishes us to implement
an alternative family
(e.g. 'gamma') or an alternative family/link combination (e.g. binomial with
probit) we can discuss
how best to meet that request: it will almost certainly be possible, but we may
seek a small amount
of funding or practical programming support from the user in order to ensure that
it can be carried out
in a timely manner}

\item{offset}{A character string specifying the name of a variable to be used as
an offset (effectively
a component of the glm which has a known coefficient a-priori and so does not need to be 
estimated by the model). As an example, an offset is needed to fit a piecewise
exponential regression model. Unlike the standard glm() function in R, ds.glm()
only allows an offset
to be set using the offset= argument, it CANNOT be included directly in the
formula via notation
such as  "y~a+b+c+d+offset(offset.vector.name)". In ds.glm this must be specified as:
formula="y~a+b+c+d", ..., offset="offset.vector.name" and ds.glm then incorporates
it appropriately
into the formula itself.}

\item{weights}{A character string specifying the name of a variable containing
prior regression
weights for the fitting process. Like offset, ds.glm does not allow a weights vector to be
written directly into the glm formula. Using weights provides an alternative way
to fit PER models
if you want to avoid using an offset, but this approach may be viewed as less 'elegant'}

\item{checks}{This argument is a boolean. If TRUE ds.glm then undertakes a series
of checks of
the structural integrity of the model that can take several minutes. Specifically
it verifies that the 
variables in the model are all defined (exist) on the server site at every study
and that they have the correct characteristics required to fit a GLM. The default
value is FALSE
if an unexplained problem in the model fit is encountered.}

\item{maxit}{A numeric scalar denoting the maximum number of iterations that are permitted
before ds.glm declares that the model has failed to converge. Logistic regression
and Poisson regression
models can require many iterations, particularly if the starting value of the
regression constant is
far away from its actual value that the glm is trying to estimate. In consequence
we often set
maxit=30 - but depending on the nature of the models you wish to fit, you may wish
to be alerted
much more quickly than this if there is a delay in convergence, or you may wish to
all MORE iterations.}

\item{CI}{a numeric, the confidence interval.}

\item{viewIter}{a boolean, tells whether the results of the intermediate iterations
should be printed on screen or not. Default is FALSE (i.e. only final results are shown).}

\item{viewVarCov}{a boolean indicating whether to return the variance-covariance matrix
of parameter estimates. TRUE=yes, FALSE=no, default=FALSE}

\item{viewCor}{a boolean indicating whether to return the correlation matrix of
parameter estimates. TRUE=yes, FALSE=no, default=FALSE}

\item{datasources}{a list of opal object(s) obtained after login to opal servers;
these objects also hold the data assigned to R, as a \code{dataframe}, from opal datasources.}
}
\value{
The main elements of the output returned by ds.glm are
listed (below) as Example 1 under 'examples'.
}
\description{
Fits a generalized linear model (glm) on data from a single or multiple sources
}
\details{
Fits a glm on data from a single source or from multiple sources. In the latter case 
the data are co-analysed (when using ds.glm) by using an approach that is mathematically
equivalent to placing all individual-level
data from all sources in one central warehouse and analysing those data using the conventional
glm() function in R. In this situation marked heterogeneity between sources should be corrected
(where possible) with fixed effects. e.g. if each study in a (binary) logistic regression
analysis has an independent intercept, it is equivalent to allowing each study to have a
different baseline risk of disease. This may also be viewed as being an IP (individual person)
meta-analysis with fixed effects.

Privacy protected iterative fitting of a glm is explained here:

(1) Begin with a guess for the coefficient vector to start iteration 1 (let's call it
beta.vector[1]). Using beta.vector[1], each source calculates the score
vector (and information matrix) generated
by its data - given beta.vector[1] -
as the sum of the score vector components (and the sum of the components of the
information matrix) derived from each individual data record in that source. NB in most models
the starting values in beta.vector[1] are set to be zero for all parameters.

(2) Transmit the resultant score vector and information matrix from each source
back to the clientside
server (CS) at the analysis centre. Let's denote
SCORE[1][j] and INFORMATION.MATRIX[1][j] as the
score vector and information matrix generated by study j at the end of the 1st iteration.

(3) CS sums the score vectors, and equivalently the information matrices, across all studies
(i.e. j=1:S, where S is the number of studies). Note that,
given beta.vector[1], this gives precisely the same final sums
for the score
vectors and information matrices as would have been obtained if all data had been in one
central warehoused database and the overall score vector and information matrix at the end of
the first iteration had been calculated
(as is standard) by simply summing across all individuals. The only difference is that
instead of directly adding all values across
all individuals, we first sum across all individuals in each data source and
then sum those study
totals across all studies - i.e. this generates EXACTLY the same ultimate sums

(4) CS then calculates sum(SCORES)%*%inverse(sum(INFORMATION.MATRICES)) -
heuristically this may be
viewed as being "the sum of the score vectors divided (NB 'matrix division') by the sum of the
information matrices". If one uses the conventional algorithm (IRLS) 
to update generalized linear models from iteration to iteration this quantity happens to be
precisely the vector to be added to the
current value of beta.vector (i.e. beta.vector[1]) to obtain
beta.vector[2] which is the improved estimate of the beta.vector to be used in iteration 2.
This updating algorithm is often  called the IRLS (Iterative Reweighted Least
Squares) algorithm 
- which is closely related to the Newton
Raphson approach but uses the expected information rather than
the observed information.

(5) Repeat steps (2)-(4) until the model converges (using the standard R
convergence criterion).
NB An alternative way to coherently pool the glm across multiple sources is to fit each
glm to completion (i.e. multiple iterations until convergence) in each source and then return
the final parameter estimates and standard errors to the CS where they could be pooled using
study-level meta-analysis. An alternative function ds.glm.REMA is being developed to do this.
It will fit the glms to completion
in each source and return the final estimates and standard errors (rather than score vectors
and information matrices). It will then rely on functions in the
R package metafor to meta-analyse the key parameters.
}
\seealso{
\link{ds.lexis} for survival analysis using piecewise exponential regression

\link{ds.gee} for generalized estimating equation models
}
\author{
Burton PR; Gaye A; LaFlamme P
}
